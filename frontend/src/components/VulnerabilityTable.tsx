import React, { useMemo, useState } from 'react';
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getPaginationRowModel,
  getGroupedRowModel,
  flexRender,
  ColumnDef,
  Row,
} from '@tanstack/react-table';
import { ChevronDown, ChevronUp, MoreVertical, Edit, Trash2, CheckSquare, Square } from 'lucide-react';

// Dummy data
const mockData = [
  {
    id: '1',
    language: 'Python',
    file: 'app/models/scan.py',
    line: 42,
    type: 'SQL Injection',
    severity: 'critical',
    status: 'Open',
    description: 'Unsanitized input in SQL query',
  },
  {
    id: '2',
    language: 'Python',
    file: 'app/models/scan.py',
    line: 88,
    type: 'Hardcoded Secret',
    severity: 'high',
    status: 'In Progress',
    description: 'Hardcoded API key',
  },
  {
    id: '3',
    language: 'JavaScript',
    file: 'frontend/src/App.tsx',
    line: 12,
    type: 'XSS',
    severity: 'medium',
    status: 'Open',
    description: 'Unescaped user input in JSX',
  },
  {
    id: '4',
    language: 'C++',
    file: 'test_repo/vuln_sample.cpp',
    line: 7,
    type: 'Buffer Overflow',
    severity: 'critical',
    status: 'Open',
    description: 'Unsafe strcpy usage',
  },
  {
    id: '5',
    language: 'JavaScript',
    file: 'frontend/src/App.tsx',
    line: 30,
    type: 'Insecure Dependency',
    severity: 'low',
    status: 'Resolved',
    description: 'Outdated package',
  },
  {
    id: '6',
    language: 'Python',
    file: 'app/routers/scan.py',
    line: 15,
    type: 'Information Disclosure',
    severity: 'informational',
    status: 'Open',
    description: 'Debug info in response',
  },
];

const severityColors: Record<string, string> = {
  critical: 'bg-status-critical',
  high: 'bg-status-high',
  medium: 'bg-status-medium',
  low: 'bg-status-low',
  informational: 'bg-status-info',
};

const statusColors: Record<string, string> = {
  Open: 'bg-status-critical',
  'In Progress': 'bg-status-high',
  Resolved: 'bg-status-low',
};

function StatusBadge({ severity, children }: { severity: string; children: React.ReactNode }) {
  return (
    <span
      className={`px-2 py-0.5 rounded text-xs font-semibold text-white ${severityColors[severity] || 'bg-gray-400'}`}
    >
      {children}
    </span>
  );
}

function RowActions({ onEdit, onDelete }: { onEdit: () => void; onDelete: () => void }) {
  return (
    <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition">
      <button onClick={onEdit} className="p-1 hover:bg-primary/10 rounded">
        <Edit className="w-4 h-4 text-primary" />
      </button>
      <button onClick={onDelete} className="p-1 hover:bg-status-critical/10 rounded">
        <Trash2 className="w-4 h-4 text-status-critical" />
      </button>
    </div>
  );
}

function ContextMenu({ x, y, onClose, onAction }: { x: number; y: number; onClose: () => void; onAction: (action: string) => void }) {
  return (
    <div
      className="fixed z-50 bg-white border border-gray-200 rounded shadow-lg py-1 w-48"
      style={{ left: x, top: y }}
      onMouseLeave={onClose}
    >
      <button className="block w-full text-left px-4 py-2 hover:bg-gray-100" onClick={() => onAction('filter')}>Filter By</button>
      <button className="block w-full text-left px-4 py-2 hover:bg-gray-100" onClick={() => onAction('copy-link')}>Copy Link</button>
      <button className="block w-full text-left px-4 py-2 hover:bg-gray-100" onClick={() => onAction('add-comment')}>Add Comment</button>
      <button className="block w-full text-left px-4 py-2 text-status-critical hover:bg-gray-100" onClick={() => onAction('delete')}>Delete</button>
    </div>
  );
}

export type Vulnerability = typeof mockData[0];

const VulnerabilityTable: React.FC = () => {
  const [data, setData] = useState<Vulnerability[]>(mockData);
  const [rowSelection, setRowSelection] = useState<Record<string, boolean>>({});
  const [sorting, setSorting] = useState<any[]>([]);
  const [pagination, setPagination] = useState({ pageIndex: 0, pageSize: 5 });
  const [contextMenu, setContextMenu] = useState<{ x: number; y: number; row: Row<Vulnerability> | null } | null>(null);
  const [loading, setLoading] = useState(false);

  const columns = useMemo<ColumnDef<Vulnerability, any>[]>(
    () => [
      {
        id: 'select',
        header: ({ table }) => (
          <button
            onClick={() => {
              const allSelected = table.getIsAllRowsSelected();
              table.toggleAllRowsSelected(!allSelected);
            }}
            className="flex items-center justify-center"
            aria-label="Select all"
          >
            {table.getIsAllRowsSelected() ? <CheckSquare className="w-4 h-4 text-primary" /> : <Square className="w-4 h-4 text-gray-400" />}
          </button>
        ),
        cell: ({ row }) => (
          <button
            onClick={() => row.toggleSelected()}
            className="flex items-center justify-center"
            aria-label="Select row"
          >
            {row.getIsSelected() ? <CheckSquare className="w-4 h-4 text-primary" /> : <Square className="w-4 h-4 text-gray-400" />}
          </button>
        ),
        size: 32,
      },
      {
        accessorKey: 'file',
        header: 'File Name',
        cell: info => <span className="font-mono text-sm">{info.getValue()}</span>,
        enableSorting: true,
      },
      {
        accessorKey: 'line',
        header: 'Line',
        cell: info => <span className="text-xs">{info.getValue()}</span>,
        enableSorting: true,
        size: 60,
      },
      {
        accessorKey: 'type',
        header: 'Vulnerability Type',
        cell: info => <span className="text-sm">{info.getValue()}</span>,
        enableSorting: true,
      },
      {
        accessorKey: 'severity',
        header: 'Severity',
        cell: info => <StatusBadge severity={info.getValue()}>{info.getValue()}</StatusBadge>,
        enableSorting: true,
        size: 100,
      },
      {
        accessorKey: 'status',
        header: 'Status',
        cell: info => <span className={`px-2 py-0.5 rounded text-xs font-semibold text-white ${statusColors[info.getValue()] || 'bg-gray-400'}`}>{info.getValue()}</span>,
        enableSorting: true,
        size: 100,
      },
      {
        id: 'actions',
        header: '',
        cell: ({ row }) => (
          <div className="flex justify-end">
            <RowActions
              onEdit={() => alert(`Edit ${row.original.id}`)}
              onDelete={() => setData(d => d.filter(v => v.id !== row.original.id))}
            />
          </div>
        ),
        size: 60,
      },
    ],
    [setData]
  );

  const table = useReactTable({
    data,
    columns,
    state: {
      rowSelection,
      sorting,
      pagination,
    },
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getGroupedRowModel: getGroupedRowModel(),
    enableRowSelection: true,
    getRowId: row => row.id,
    debugTable: false,
  });

  // Group by language and file
  const grouped = useMemo(() => {
    const groups: Record<string, Record<string, Vulnerability[]>> = {};
    data.forEach(vuln => {
      if (!groups[vuln.language]) groups[vuln.language] = {};
      if (!groups[vuln.language][vuln.file]) groups[vuln.language][vuln.file] = [];
      groups[vuln.language][vuln.file].push(vuln);
    });
    return groups;
  }, [data]);

  // Context menu handler
  const handleContextMenu = (e: React.MouseEvent, row: Row<Vulnerability>) => {
    e.preventDefault();
    setContextMenu({ x: e.clientX, y: e.clientY, row });
  };

  // Loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[300px] text-textSecondary animate-pulse">
        Loading vulnerabilities...
      </div>
    );
  }

  // Empty state
  if (!data.length) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[300px] text-textSecondary">
        <span className="text-lg font-semibold mb-2">No vulnerabilities found</span>
        <span className="text-sm">Try adjusting your filters or check back later.</span>
      </div>
    );
  }

  return (
    <div className="bg-card rounded shadow p-0 overflow-x-auto">
      {/* Table */}
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-background">
          {table.getHeaderGroups().map(headerGroup => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map(header => (
                <th
                  key={header.id}
                  colSpan={header.colSpan}
                  className={`px-3 py-2 text-left text-xs font-semibold text-textSecondary select-none whitespace-nowrap ${header.column.getCanSort() ? 'cursor-pointer group' : ''}`}
                  onClick={header.column.getToggleSortingHandler()}
                >
                  <div className="flex items-center gap-1">
                    {flexRender(header.column.columnDef.header, header.getContext())}
                    {header.column.getCanSort() && (
                      <span className="ml-1">
                        {header.column.getIsSorted() === 'asc' && <ChevronUp className="w-3 h-3 inline" />}
                        {header.column.getIsSorted() === 'desc' && <ChevronDown className="w-3 h-3 inline" />}
                      </span>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody className="divide-y divide-gray-100">
          {/* Grouped by language */}
          {Object.entries(grouped).map(([language, files]) => (
            <React.Fragment key={language}>
              <tr>
                <td colSpan={columns.length} className="bg-gray-100 px-3 py-2 font-bold text-primary text-sm">
                  {language}
                </td>
              </tr>
              {Object.entries(files).map(([file, vulns]) => (
                <React.Fragment key={file}>
                  <tr>
                    <td colSpan={columns.length} className="bg-gray-50 px-3 py-1 font-mono text-xs text-textSecondary">
                      {file}
                    </td>
                  </tr>
                  {vulns.map(vuln => {
                    const row = table.getRowModel().rows.find(r => r.original.id === vuln.id);
                    if (!row) return null;
                    return (
                      <tr
                        key={vuln.id}
                        className="group hover:bg-primary/5 transition cursor-pointer relative"
                        onContextMenu={e => handleContextMenu(e, row)}
                      >
                        {row.getVisibleCells().map(cell => (
                          <td
                            key={cell.id}
                            className={`px-3 py-2 whitespace-nowrap ${cell.column.id === 'select' ? 'w-8' : ''}`}
                          >
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </td>
                        ))}
                        {/* Actions on hover for the row */}
                        <td className="absolute right-2 top-1/2 -translate-y-1/2">
                          <div className="hidden group-hover:flex gap-2">
                            <button
                              onClick={() => alert(`Edit ${vuln.id}`)}
                              className="p-1 hover:bg-primary/10 rounded"
                            >
                              <Edit className="w-4 h-4 text-primary" />
                            </button>
                            <button
                              onClick={() => setData(d => d.filter(v => v.id !== vuln.id))}
                              className="p-1 hover:bg-status-critical/10 rounded"
                            >
                              <Trash2 className="w-4 h-4 text-status-critical" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </React.Fragment>
              ))}
            </React.Fragment>
          ))}
        </tbody>
      </table>
      {/* Pagination */}
      <div className="flex items-center justify-between px-4 py-2 border-t border-gray-100 bg-background text-xs">
        <div>
          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            className="px-2 py-1 rounded border border-gray-200 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            Previous
          </button>
          <button
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            className="px-2 py-1 rounded border border-gray-200 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            Next
          </button>
        </div>
      </div>
      {/* Context Menu */}
      {contextMenu && contextMenu.row && (
        <ContextMenu
          x={contextMenu.x}
          y={contextMenu.y}
          onClose={() => setContextMenu(null)}
          onAction={action => {
            setContextMenu(null);
            if (action === 'delete') {
              setData(d => d.filter(v => v.id !== contextMenu.row!.original.id));
            } else {
              alert(`Action: ${action} on ${contextMenu.row!.original.id}`);
            }
          }}
        />
      )}
    </div>
  );
};

export default VulnerabilityTable; 