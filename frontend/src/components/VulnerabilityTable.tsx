import React, { useMemo, useState, useEffect } from 'react';
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getPaginationRowModel,
  getGroupedRowModel,
  flexRender,
  ColumnDef,
  Row,
} from '@tanstack/react-table';
import { ChevronDown, ChevronUp, Edit, Trash2, CheckSquare, Square, AlertCircle, Download, FileText, Filter, Sparkles } from 'lucide-react';
import ContextMenu from './ContextMenu';
import BulkActionBar from './BulkActionBar';
import VulnerabilityFilters, { FilterOptions } from './VulnerabilityFilters';
import AIRecommendationModal from './AIRecommendationModal';
import apiClient, { Vulnerability as ApiVulnerability } from '../api';

// Dummy data
const mockData = [
  {
    id: '1',
    language: 'Python',
    file: 'app/models/scan.py',
    line: 42,
    type: 'SQL Injection',
    severity: 'critical',
    status: 'Open',
    description: 'Unsanitized input in SQL query',
  },
  {
    id: '2',
    language: 'Python',
    file: 'app/models/scan.py',
    line: 88,
    type: 'Hardcoded Secret',
    severity: 'high',
    status: 'In Progress',
    description: 'Hardcoded API key',
  },
  {
    id: '3',
    language: 'JavaScript',
    file: 'frontend/src/App.tsx',
    line: 12,
    type: 'XSS',
    severity: 'medium',
    status: 'Open',
    description: 'Unescaped user input in JSX',
  },
  {
    id: '4',
    language: 'C++',
    file: 'test_repo/vuln_sample.cpp',
    line: 7,
    type: 'Buffer Overflow',
    severity: 'critical',
    status: 'Open',
    description: 'Unsafe strcpy usage',
  },
  {
    id: '5',
    language: 'JavaScript',
    file: 'frontend/src/App.tsx',
    line: 30,
    type: 'Insecure Dependency',
    severity: 'low',
    status: 'Resolved',
    description: 'Outdated package',
  },
  {
    id: '6',
    language: 'Python',
    file: 'app/routers/scan.py',
    line: 15,
    type: 'Information Disclosure',
    severity: 'informational',
    status: 'Open',
    description: 'Debug info in response',
  },
];

const severityColors: Record<string, string> = {
  critical: 'bg-status-critical',
  high: 'bg-status-high',
  medium: 'bg-status-medium',
  low: 'bg-status-low',
  informational: 'bg-status-info',
};

const statusColors: Record<string, string> = {
  Open: 'bg-status-critical',
  'In Progress': 'bg-status-high',
  Resolved: 'bg-status-low',
};

function StatusBadge({ severity, children }: { severity: string; children: React.ReactNode }) {
  return (
    <span
      className={`px-2 py-0.5 rounded text-xs font-semibold text-white ${severityColors[severity] || 'bg-gray-400'}`}
    >
      {children}
    </span>
  );
}

export type Vulnerability = typeof mockData[0];

export interface VulnerabilityTableProps {
  vulnerabilities?: ApiVulnerability[];
  loading?: boolean;
  error?: string;
  onExportJSON?: () => void;
  onExportCSV?: () => void;
}

  const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ 
    vulnerabilities = [], 
    loading = false, 
    error,
    onExportJSON,
    onExportCSV
  }) => {
    console.log('VulnerabilityTable rendered with:', { vulnerabilities: vulnerabilities.length, loading, error });
  // Ensure vulnerabilities is always an array and add logging
  const safeVulnerabilities = useMemo(() => {
    console.log('VulnerabilityTable received vulnerabilities:', vulnerabilities);
    
    if (!vulnerabilities) {
      console.log('Vulnerabilities is null/undefined, using empty array');
      return [];
    }
    
    if (!Array.isArray(vulnerabilities)) {
      console.warn('Vulnerabilities is not an array:', typeof vulnerabilities, vulnerabilities);
      return [];
    }
    
    console.log('Vulnerabilities is valid array with', vulnerabilities.length, 'items');
    return vulnerabilities;
  }, [vulnerabilities]);

  // Transform API data to match table format
  const transformedData = useMemo(() => {
    console.log('Transforming vulnerabilities:', safeVulnerabilities);
    
    return safeVulnerabilities.map((vuln, index) => ({
      id: `vuln-${index}`,
      language: vuln.language || 'Unknown',
      file: vuln.file_path,
      line: vuln.line_number,
      type: vuln.type,
      severity: vuln.severity,
      status: 'Open', // Default status
      description: vuln.description,
      code_snippet: vuln.code_snippet,
      recommendation: vuln.recommendation,
    }));
  }, [safeVulnerabilities]);

  const [data, setData] = useState<Vulnerability[]>(transformedData);
  const [rowSelection, setRowSelection] = useState<Record<string, boolean>>({});
  const [sorting, setSorting] = useState<any[]>([]);
  const [pagination, setPagination] = useState({ pageIndex: 0, pageSize: 5 });
  const [contextMenu, setContextMenu] = useState<{ x: number; y: number; row: Row<Vulnerability> | null } | null>(null);
  const [filters, setFilters] = useState<FilterOptions>({
    severity: [],
    language: [],
    status: [],
  });
  const [showFilters, setShowFilters] = useState(false);
  const [aiModalOpen, setAIModalOpen] = useState(false);
  const [selectedVulnerability, setSelectedVulnerability] = useState<any>(null);
  const [aiAvailable, setAIAvailable] = useState(false);

  // Update data when props change
  useEffect(() => {
    setData(transformedData);
  }, [transformedData]);

  // Get available filter options
  const availableOptions = useMemo(() => {
    const severities = Array.from(new Set(data.map(v => v.severity)));
    const languages = Array.from(new Set(data.map(v => v.language)));
    const statuses = Array.from(new Set(data.map(v => v.status)));
    
    return {
      severities,
      languages,
      statuses,
    };
  }, [data]);

  // Apply filters to data
  const filteredData = useMemo(() => {
    return data.filter(vuln => {
      // Severity filter
      if (filters.severity.length > 0 && !filters.severity.includes(vuln.severity)) {
        return false;
      }
      
      // Language filter
      if (filters.language.length > 0 && !filters.language.includes(vuln.language)) {
        return false;
      }
      
      // Status filter
      if (filters.status.length > 0 && !filters.status.includes(vuln.status)) {
        return false;
      }
      
      return true;
    });
  }, [data, filters]);

  // AI recommendations are always available since we use local recommendations
  useEffect(() => {
    setAIAvailable(true);
  }, []);

  const handleGetAIFix = async (vulnerability: any) => {
    console.log('AI Fix button clicked for vulnerability:', vulnerability);
    
    // Ensure vulnerability has all required fields
    const vulnerabilityData = {
      type: vulnerability.type,
      severity: vulnerability.severity,
      file_path: vulnerability.file,
      line_number: vulnerability.line,
      code_snippet: vulnerability.code_snippet || '',
      description: vulnerability.description,
      language: vulnerability.language
    };
    
    // Set the selected vulnerability and open modal
    setSelectedVulnerability(vulnerabilityData);
    setAIModalOpen(true);
    
    // The AIFixModal will handle the API call automatically when it opens
  };

  const columns = useMemo<ColumnDef<Vulnerability, any>[]>(
    () => [
      {
        id: 'select',
        header: ({ table }) => (
          <button
            onClick={() => {
              const allSelected = table.getIsAllRowsSelected();
              table.toggleAllRowsSelected(!allSelected);
            }}
            className="flex items-center justify-center"
            aria-label="Select all"
          >
            {table.getIsAllRowsSelected() ? <CheckSquare className="w-4 h-4 text-primary" /> : <Square className="w-4 h-4 text-gray-400" />}
          </button>
        ),
        cell: ({ row }) => (
          <button
            onClick={() => row.toggleSelected()}
            className="flex items-center justify-center"
            aria-label="Select row"
          >
            {row.getIsSelected() ? <CheckSquare className="w-4 h-4 text-primary" /> : <Square className="w-4 h-4 text-gray-400" />}
          </button>
        ),
        size: 32,
      },
      {
        accessorKey: 'file',
        header: 'File Name',
        cell: info => <span className="font-mono text-sm">{info.getValue()}</span>,
        enableSorting: true,
      },
      {
        accessorKey: 'line',
        header: 'Line',
        cell: info => <span className="text-xs">{info.getValue()}</span>,
        enableSorting: true,
        size: 60,
      },
      {
        accessorKey: 'type',
        header: 'Vulnerability Type',
        cell: info => <span className="text-sm">{info.getValue()}</span>,
        enableSorting: true,
      },
      {
        accessorKey: 'severity',
        header: 'Severity',
        cell: info => <StatusBadge severity={info.getValue()}>{info.getValue()}</StatusBadge>,
        enableSorting: true,
        size: 100,
      },
      {
        accessorKey: 'status',
        header: 'Status',
        cell: info => <span className={`px-2 py-0.5 rounded text-xs font-semibold text-white ${statusColors[info.getValue()] || 'bg-gray-400'}`}>{info.getValue()}</span>,
        enableSorting: true,
        size: 100,
      },
      {
        id: 'actions',
        header: '',
        cell: ({ row }) => (
          <div className="flex justify-end gap-2">
            <button
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                handleGetAIFix(row.original);
              }}
              className="flex items-center gap-1 px-3 py-1.5 rounded text-xs bg-purple-100 text-purple-700 hover:bg-purple-200 cursor-pointer transition"
              title="Get AI Recommendation"
            >
              <Sparkles className="w-3 h-3" />
              AI Fix
            </button>

            <button onClick={() => alert(`Edit ${row.original.id}`)} className="p-1 hover:bg-primary/10 rounded">
              <Edit className="w-4 h-4 text-primary" />
            </button>
            <button onClick={() => setData(d => d.filter(v => v.id !== row.original.id))} className="p-1 hover:bg-status-critical/10 rounded">
              <Trash2 className="w-4 h-4 text-status-critical" />
            </button>
          </div>
        ),
        size: 120,
      },
    ],
    [setData, aiAvailable]
  );

  const table = useReactTable({
    data: filteredData, // Use filtered data instead of original data
    columns,
    state: {
      rowSelection,
      sorting,
      pagination,
    },
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getGroupedRowModel: getGroupedRowModel(),
    enableRowSelection: true,
    getRowId: row => row.id,
    debugTable: false,
  });

  // Group by language and file
  const grouped = useMemo(() => {
    const groups: Record<string, Record<string, Vulnerability[]>> = {};
    filteredData.forEach(vuln => { // Use filtered data
      if (!groups[vuln.language]) groups[vuln.language] = {};
      if (!groups[vuln.language][vuln.file]) groups[vuln.language][vuln.file] = [];
      groups[vuln.language][vuln.file].push(vuln);
    });
    return groups;
  }, [filteredData]);

  // Helper: get selected vulnerabilities
  const selectedIds = Object.keys(rowSelection).filter(id => rowSelection[id]);
  const selectedVulns = filteredData.filter(v => selectedIds.includes(v.id)); // Use filtered data

  // Bulk actions
  const handleBulkDelete = () => {
    setData(d => d.filter(v => !selectedIds.includes(v.id)));
    setRowSelection({});
  };
  const handleBulkStatus = (status: string) => {
    setData(d => d.map(v => selectedIds.includes(v.id) ? { ...v, severity: status } : v));
    setRowSelection({});
  };
  const handleBulkExport = () => {
    const json = JSON.stringify(selectedVulns, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerabilities.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Export functions - these will be handled by the parent component
  const handleExportJSON = () => {
    if (onExportJSON) {
      onExportJSON();
    }
  };

  const handleExportCSV = () => {
    if (onExportCSV) {
      onExportCSV();
    }
  };

  // Context menu handler
  const handleContextMenu = (e: React.MouseEvent, row: Row<Vulnerability>) => {
    e.preventDefault();
    setContextMenu({ x: e.clientX, y: e.clientY, row });
  };

  // Loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[300px] text-textSecondary animate-pulse">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2"></div>
          <p>Scanning repository...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[300px] text-textSecondary">
        <AlertCircle className="w-12 h-12 text-status-critical mb-4" />
        <span className="text-lg font-semibold mb-2">Scan Failed</span>
        <span className="text-sm text-center max-w-md">{error}</span>
      </div>
    );
  }

  // Empty state
  if (!data.length) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[300px] text-textSecondary">
        <span className="text-lg font-semibold mb-2">No vulnerabilities found</span>
        <span className="text-sm">Try scanning a repository to see results.</span>
      </div>
    );
  }

  return (
    <div className="bg-card rounded shadow p-0 overflow-x-auto">
      {/* Filters */}
      <div className="p-4 border-b border-gray-100 bg-gray-50">
        <div className="flex items-center justify-between mb-4">
          <div className="text-sm text-textSecondary">
            {filteredData.length} of {data.length} vulnerabilit{filteredData.length !== 1 ? 'ies' : 'y'} shown
          </div>
          <button
            onClick={() => setShowFilters(!showFilters)}
            className="flex items-center gap-2 px-3 py-1.5 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 transition"
          >
            <Filter className="h-4 w-4" />
            {showFilters ? 'Hide' : 'Show'} Filters
          </button>
        </div>
        
        {showFilters && (
          <VulnerabilityFilters
            filters={filters}
            onFiltersChange={setFilters}
            availableSeverities={availableOptions.severities}
            availableLanguages={availableOptions.languages}
            availableStatuses={availableOptions.statuses}
          />
        )}
      </div>

      {/* Bulk Action Bar */}
      {selectedIds.length > 0 && (
        <BulkActionBar
          selectedCount={selectedIds.length}
          onDelete={handleBulkDelete}
          onExport={handleBulkExport}
          onChangeStatus={handleBulkStatus}
        />
      )}
      
      {/* Export Buttons */}
      {filteredData.length > 0 && (
        <div className="flex items-center justify-between p-4 border-b border-gray-100 bg-gray-50">
          <div className="text-sm text-textSecondary">
            {filteredData.length} vulnerabilit{filteredData.length !== 1 ? 'ies' : 'y'} found
          </div>
          <div className="flex gap-2">
            <button
              onClick={handleExportJSON}
              className="flex items-center gap-2 px-3 py-1.5 text-sm bg-primary text-white rounded hover:bg-primary/90 transition"
            >
              <FileText className="h-4 w-4" />
              Export JSON
            </button>
            <button
              onClick={handleExportCSV}
              className="flex items-center gap-2 px-3 py-1.5 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition"
            >
              <Download className="h-4 w-4" />
              Export CSV
            </button>
          </div>
        </div>
      )}
      
      {/* Table */}
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-background">
          {table.getHeaderGroups().map(headerGroup => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map(header => (
                <th
                  key={header.id}
                  colSpan={header.colSpan}
                  className={`px-3 py-2 text-left text-xs font-semibold text-textSecondary select-none whitespace-nowrap ${header.column.getCanSort() ? 'cursor-pointer group' : ''}`}
                  onClick={header.column.getToggleSortingHandler()}
                >
                  <div className="flex items-center gap-1">
                    {flexRender(header.column.columnDef.header, header.getContext())}
                    {header.column.getCanSort() && (
                      <span className="ml-1">
                        {header.column.getIsSorted() === 'asc' && <ChevronUp className="w-3 h-3 inline" />}
                        {header.column.getIsSorted() === 'desc' && <ChevronDown className="w-3 h-3 inline" />}
                      </span>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody className="divide-y divide-gray-100">
          {/* Grouped by language */}
          {Object.entries(grouped).map(([language, files]) => (
            <React.Fragment key={language}>
              <tr>
                <td colSpan={columns.length} className="bg-gray-100 px-3 py-2 font-bold text-primary text-sm">
                  {language}
                </td>
              </tr>
              {Object.entries(files).map(([file, vulns]) => (
                <React.Fragment key={file}>
                  <tr>
                    <td colSpan={columns.length} className="bg-gray-50 px-3 py-1 font-mono text-xs text-textSecondary">
                      {file}
                    </td>
                  </tr>
                  {vulns.map(vuln => {
                    const row = table.getRowModel().rows.find(r => r.original.id === vuln.id);
                    if (!row) return null;
                    return (
                      <tr
                        key={vuln.id}
                        className="group hover:bg-primary/5 transition relative"
                        onContextMenu={e => handleContextMenu(e, row)}
                      >
                        {row.getVisibleCells().map(cell => (
                          <td
                            key={cell.id}
                            className={`px-3 py-2 whitespace-nowrap ${cell.column.id === 'select' ? 'w-8' : ''}`}
                          >
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </td>
                        ))}
                      </tr>
                    );
                  })}
                </React.Fragment>
              ))}
            </React.Fragment>
          ))}
        </tbody>
      </table>
      {/* Pagination */}
      <div className="flex items-center justify-between px-4 py-2 border-t border-gray-100 bg-background text-xs">
        <div>
          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            className="px-2 py-1 rounded border border-gray-200 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            Previous
          </button>
          <button
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            className="px-2 py-1 rounded border border-gray-200 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            Next
          </button>
        </div>
      </div>
      {/* Context Menu */}
      {contextMenu && contextMenu.row && (
        <ContextMenu
          x={contextMenu.x}
          y={contextMenu.y}
          onClose={() => setContextMenu(null)}
          onAction={action => {
            setContextMenu(null);
            if (typeof action === 'string') {
              if (action === 'delete') {
                setData(d => d.filter(v => v.id !== contextMenu.row!.original.id));
              } else {
                alert(`Action: ${action} on ${contextMenu.row!.original.id}`);
              }
            } else if ('tag' in action) {
              alert(`Tag: ${action.tag} on ${contextMenu.row!.original.id}`);
            } else if ('status' in action) {
              setData(d => d.map(v => v.id === contextMenu.row!.original.id ? { ...v, severity: action.status } : v));
            }
          }}
        />
      )}
      
      {/* AI Recommendation Modal */}
      {selectedVulnerability && (
        <AIRecommendationModal
          isOpen={aiModalOpen}
          onClose={() => {
            setAIModalOpen(false);
            setSelectedVulnerability(null);
          }}
          vulnerability={selectedVulnerability}
        />
      )}
    </div>
  );
};

export default VulnerabilityTable; 