import React from 'react';
import { Filter, X } from 'lucide-react';

export interface FilterOptions {
  severity: string[];
  language: string[];
  status: string[];
}

interface VulnerabilityFiltersProps {
  filters: FilterOptions;
  onFiltersChange: (filters: FilterOptions) => void;
  availableSeverities: string[];
  availableLanguages: string[];
  availableStatuses: string[];
}

const VulnerabilityFilters: React.FC<VulnerabilityFiltersProps> = ({
  filters,
  onFiltersChange,
  availableSeverities,
  availableLanguages,
  availableStatuses,
}) => {
  const updateFilter = (filterType: keyof FilterOptions, value: string, checked: boolean) => {
    const newFilters = { ...filters };
    
    if (checked) {
      if (!newFilters[filterType].includes(value)) {
        newFilters[filterType] = [...newFilters[filterType], value];
      }
    } else {
      newFilters[filterType] = newFilters[filterType].filter(item => item !== value);
    }
    
    onFiltersChange(newFilters);
  };

  const clearAllFilters = () => {
    onFiltersChange({
      severity: [],
      language: [],
      status: [],
    });
  };

  const hasActiveFilters = filters.severity.length > 0 || filters.language.length > 0 || filters.status.length > 0;

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 mb-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Filter className="w-4 h-4 text-gray-500" />
          <h3 className="text-sm font-medium text-gray-900">Filters</h3>
        </div>
        {hasActiveFilters && (
          <button
            onClick={clearAllFilters}
            className="text-xs text-gray-500 hover:text-gray-700 flex items-center gap-1"
          >
            <X className="w-3 h-3" />
            Clear all
          </button>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* Severity Filter */}
        <div>
          <h4 className="text-xs font-medium text-gray-700 mb-2">Severity</h4>
          <div className="space-y-1">
            {availableSeverities.map(severity => (
              <label key={severity} className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={filters.severity.includes(severity)}
                  onChange={(e) => updateFilter('severity', severity, e.target.checked)}
                  className="rounded border-gray-300 text-primary focus:ring-primary"
                />
                <span className="capitalize">{severity}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Language Filter */}
        <div>
          <h4 className="text-xs font-medium text-gray-700 mb-2">Language</h4>
          <div className="space-y-1">
            {availableLanguages.map(language => (
              <label key={language} className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={filters.language.includes(language)}
                  onChange={(e) => updateFilter('language', language, e.target.checked)}
                  className="rounded border-gray-300 text-primary focus:ring-primary"
                />
                <span>{language}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Status Filter */}
        <div>
          <h4 className="text-xs font-medium text-gray-700 mb-2">Status</h4>
          <div className="space-y-1">
            {availableStatuses.map(status => (
              <label key={status} className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={filters.status.includes(status)}
                  onChange={(e) => updateFilter('status', status, e.target.checked)}
                  className="rounded border-gray-300 text-primary focus:ring-primary"
                />
                <span>{status}</span>
              </label>
            ))}
          </div>
        </div>
      </div>

      {/* Active Filters Display */}
      {hasActiveFilters && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex flex-wrap gap-2">
            {filters.severity.map(severity => (
              <span
                key={`severity-${severity}`}
                className="inline-flex items-center gap-1 px-2 py-1 bg-primary/10 text-primary text-xs rounded"
              >
                Severity: {severity}
                <button
                  onClick={() => updateFilter('severity', severity, false)}
                  className="hover:bg-primary/20 rounded"
                >
                  <X className="w-3 h-3" />
                </button>
              </span>
            ))}
            {filters.language.map(language => (
              <span
                key={`language-${language}`}
                className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded"
              >
                Language: {language}
                <button
                  onClick={() => updateFilter('language', language, false)}
                  className="hover:bg-blue-200 rounded"
                >
                  <X className="w-3 h-3" />
                </button>
              </span>
            ))}
            {filters.status.map(status => (
              <span
                key={`status-${status}`}
                className="inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 text-xs rounded"
              >
                Status: {status}
                <button
                  onClick={() => updateFilter('status', status, false)}
                  className="hover:bg-green-200 rounded"
                >
                  <X className="w-3 h-3" />
                </button>
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityFilters; 