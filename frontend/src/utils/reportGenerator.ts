import { ScanResult, Vulnerability } from '../api';

export interface ReportData {
  repoUrl: string;
  scanDate: string;
  vulnerabilities: Vulnerability[];
  summary: {
    totalVulnerabilities: number;
    criticalIssues: number;
    highIssues: number;
    mediumIssues: number;
    lowIssues: number;
    filesScanned: number;
    scanDuration: number;
  };
  aiRecommendations?: {
    [vulnerabilityId: string]: {
      recommendation: string;
      fixed_code: string;
      explanation: string;
      best_practices: string[];
    };
  };
}

export const generateTextReport = (data: ReportData): string => {
  const { repoUrl, scanDate, vulnerabilities, summary, aiRecommendations } = data;
  
  let report = `SCANSEC VULNERABILITY REPORT
${'='.repeat(50)}

Repository: ${repoUrl}
Scan Date: ${scanDate}
Generated by: ScanSec Security Scanner

SUMMARY
${'-'.repeat(20)}
Total Vulnerabilities: ${summary.totalVulnerabilities}
Critical Issues: ${summary.criticalIssues}
High Issues: ${summary.highIssues}
Medium Issues: ${summary.mediumIssues}
Low Issues: ${summary.lowIssues}
Files Scanned: ${summary.filesScanned}
Scan Duration: ${summary.scanDuration} seconds

VULNERABILITIES
${'-'.repeat(20)}
`;

  if (vulnerabilities.length === 0) {
    report += 'No vulnerabilities found.\n';
  } else {
    vulnerabilities.forEach((vuln, index) => {
      const vulnId = `vuln-${index}`;
      report += `${index + 1}. ${vuln.type.toUpperCase()}
   Severity: ${vuln.severity.toUpperCase()}
   File: ${vuln.file_path}
   Line: ${vuln.line_number}
   Description: ${vuln.description}
   ${vuln.recommendation ? `Recommendation: ${vuln.recommendation}` : ''}
   ${vuln.code_snippet ? `Code Snippet: ${vuln.code_snippet}` : ''}
   
`;

      // Add AI recommendation if available
      if (aiRecommendations && aiRecommendations[vulnId]) {
        const aiRec = aiRecommendations[vulnId];
        report += `   AI RECOMMENDATION:
   ${aiRec.recommendation}
   
   FIXED CODE:
   ${aiRec.fixed_code}
   
   EXPLANATION:
   ${aiRec.explanation}
   
   BEST PRACTICES:
   ${aiRec.best_practices.map((practice, i) => `   ${i + 1}. ${practice}`).join('\n')}
   
`;
      }
    });
  }

  report += `
RECOMMENDATIONS
${'-'.repeat(20)}
1. Address critical and high severity vulnerabilities immediately
2. Review and fix medium severity issues
3. Consider low severity issues for future improvements
4. Implement secure coding practices
5. Regular security scanning is recommended
${aiRecommendations ? '6. Review AI-generated recommendations for detailed fixes' : ''}

Report generated on ${new Date().toLocaleString()}
`;

  return report;
};

export const generateCSVReport = (data: ReportData): string => {
  const { repoUrl, scanDate, vulnerabilities, aiRecommendations } = data;
  
  let csv = 'Type,Severity,File,Line,Description,Recommendation,AI_Recommendation,AI_Fixed_Code,AI_Explanation\n';
  
  vulnerabilities.forEach((vuln, index) => {
    const vulnId = `vuln-${index}`;
    const aiRec = aiRecommendations?.[vulnId];
    
    const row = [
      `"${vuln.type}"`,
      `"${vuln.severity}"`,
      `"${vuln.file_path}"`,
      vuln.line_number.toString(),
      `"${vuln.description.replace(/"/g, '""')}"`,
      `"${(vuln.recommendation || '').replace(/"/g, '""')}"`,
      `"${(aiRec?.recommendation || '').replace(/"/g, '""')}"`,
      `"${(aiRec?.fixed_code || '').replace(/"/g, '""')}"`,
      `"${(aiRec?.explanation || '').replace(/"/g, '""')}"`
    ].join(',');
    csv += row + '\n';
  });
  
  return csv;
};

export const downloadReport = (content: string, filename: string, mimeType: string = 'text/plain') => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const exportScanReport = (scanResult: ScanResult, vulnerabilities: Vulnerability[], aiRecommendations?: any) => {
  const summary = {
    totalVulnerabilities: vulnerabilities.length,
    criticalIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length,
    highIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length,
    mediumIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length,
    lowIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length,
    filesScanned: scanResult.summary?.total_files_scanned || 0,
    scanDuration: scanResult.summary?.scan_duration_seconds || 0,
  };

  const reportData: ReportData = {
    repoUrl: scanResult.repo_url,
    scanDate: scanResult.scan_timestamp || new Date().toISOString(),
    vulnerabilities,
    summary,
    aiRecommendations,
  };

  // Generate and download text report
  const textReport = generateTextReport(reportData);
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `scansec_report_${timestamp}.txt`;
  downloadReport(textReport, filename, 'text/plain');

  return { success: true, filename };
};

export const exportCSVReport = (scanResult: ScanResult, vulnerabilities: Vulnerability[], aiRecommendations?: any) => {
  const summary = {
    totalVulnerabilities: vulnerabilities.length,
    criticalIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length,
    highIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length,
    mediumIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length,
    lowIssues: vulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length,
    filesScanned: scanResult.summary?.total_files_scanned || 0,
    scanDuration: scanResult.summary?.scan_duration_seconds || 0,
  };

  const reportData: ReportData = {
    repoUrl: scanResult.repo_url,
    scanDate: scanResult.scan_timestamp || new Date().toISOString(),
    vulnerabilities,
    summary,
    aiRecommendations,
  };

  // Generate and download CSV report
  const csvReport = generateCSVReport(reportData);
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `scansec_report_${timestamp}.csv`;
  downloadReport(csvReport, filename, 'text/csv');

  return { success: true, filename };
}; 